;; Init package.el
(require 'package)
(package-initialize)


;;
;; Set TERM env var to 'xterm-256color' (for the themes)
;;
(setenv "TERM" "xterm-256color")


;; Add additional ELPA repos
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("marmalade"
                         . "https://marmalade-repo.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))


;;
;; Disable creating of lock files (https://www.gnu.org/software/emacs/manual/html_node/emacs/Interlocking.html#Interlocking)
;;
(setq create-lockfiles nil)

;;
;; Enable line numbers
;;
(global-linum-mode 1)


;;
;; Set cursor properties
;;
(setq-default cursor-type 'bar)
(set-cursor-color "#ffffff")


;;
;; Display time in the modeline
;;
(display-time-mode 1)
(setq display-time-day-and-date 1) 
(setq display-time-24hr-format 1)
;;(setq display-time-format "%I:%M:%S")


;;
;; Save session
;;
(desktop-save-mode 1)


;;
;; Enable smooth scrolling
;;
;; scroll one line at a time (less "jumpy" than defaults)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time


;;
;; Turn off the top bar
;;
(menu-bar-mode -1)


;;
;; Reload buffer automatically
;;
(global-auto-revert-mode t)

;;
;; Key bindings for WindMove (https://www.emacswiki.org/emacs/WindMove)
;;
(global-set-key (kbd "C-c <left>")  'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>")    'windmove-up)
(global-set-key (kbd "C-c <down>")  'windmove-down)


;;
;; Enable whitespace mode (http://ergoemacs.org/emacs/whitespace-mode.html)
;;
(global-whitespace-mode)
(setq whitespace-style (quote (spaces tabs newline space-mark tab-mark newline-mark)))
(setq whitespace-display-mappings
       ;; all numbers are Unicode codepoint in decimal. try (insert-char 182 ) to see it
      '(
        (space-mark 32 [183] [46]) ; 32 SPACE, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
        (newline-mark)
        (tab-mark 9 [9655 9] [92 9]) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」
        ))


;; Save all tempfiles in $TMPDIR/emacs$UID/
(defconst emacs-tmp-dir (format "%s/%s%s/" temporary-file-directory
"emacs" (user-uid)))
(setq backup-directory-alist
    `((".*" . ,emacs-tmp-dir)))
(setq auto-save-file-name-transforms
    `((".*" ,emacs-tmp-dir t)))
(setq auto-save-list-file-prefix
    emacs-tmp-dir)


;;
;; Set ample theme (https://github.com/jordonbiondo/ample-theme)
;;
;;(load-theme 'ample t t)
;;(load-theme 'ample-flat t t)
;;(load-theme 'ample-light t t)
;;(enable-theme 'ample-flat)


;;
;; Show whitespaces (built-in)
;;
;; (require 'whitespace)
;; (autoload 'whitespace-mode           "whitespace" "Toggle whitespace visualization."        t)
;; (autoload 'whitespace-toggle-options "whitespace" "Toggle local `whitespace-mode' options." t)


;;
;; Customize mode line (https://github.com/Malabarba/smart-mode-line)
;;
;;(setq sml/no-confirm-load-theme t)
;;(setq sml/theme 'dark)
;;(sml/setup)


;;
;; Smex package (https://github.com/nonsequitur/smex/)
;;
(require 'smex) ; Not needed if you use package.el
(smex-initialize) ; Can be omitted. This might cause a (minimal) delay
                  ; when Smex is auto-initialized on its first run.
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)


;;
;; Drug stuff (https://github.com/rejeep/drag-stuff.el)
;;
(drag-stuff-global-mode 1)


;;
;; Web-mode (http://web-mode.org/)
;;
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(defun my-web-mode-hook ()
  "Hooks for Web mode."
  (set-face-attribute 'web-mode-html-tag-face nil :foreground "Pink3")
)
(add-hook 'web-mode-hook  'my-web-mode-hook)


;; smart cursor
;;(smart-cursor-color-mode +1)


;;
;; Powerline (https://github.com/jonathanchu/emacs-powerline)
;;
;;(add-to-list 'load-path "~/.emacs.d/vendor/emacs-powerline")
;;(require 'powerline)
;;(setq powerline-arrow-shape 'arrow14)


;; Powerline (https://github.com/Dewdrops/powerline)
;;(add-to-list 'load-path "~/.emacs.d/vendor/powerline")
;;(require 'powerline)
;;(powerline-center-evil-theme)


;;
;; Moe-theme
;;
(require 'moe-theme)

;; Show highlighted buffer-id as decoration. (Default: nil)
(setq moe-theme-highlight-buffer-id t)

;; Resize titles (optional).
;; (setq moe-theme-resize-markdown-title '(1.5 1.4 1.3 1.2 1.0 1.0))
;; (setq moe-theme-resize-org-title '(1.5 1.4 1.3 1.2 1.1 1.0 1.0 1.0 1.0))
;; (setq moe-theme-resize-rst-title '(1.5 1.4 1.3 1.2 1.1 1.0))

;; Choose a color for mode-line.(Default: blue)
(moe-theme-set-color 'cyan)

;; Finally, apply moe-theme now.
;; Choose what you like, (moe-light) or (moe-dark)
(moe-dark)


;;
;; ElScreen
;;
(setq elscreen-prefix-key "\C-z")


;;
;; ace jump mode (https://github.com/winterTTr/ace-jump-mode)
;;
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)


;;
;; ido vertical mode (https://github.com/creichert/ido-vertical-mode.el)
;;
(require 'ido-vertical-mode)
(ido-mode 1)
(ido-vertical-mode 1)
(setq ido-vertical-show-count t)
(setq ido-use-faces t)
(set-face-attribute 'ido-vertical-first-match-face nil
                    :background nil
                    :foreground "orange")
(set-face-attribute 'ido-vertical-only-match-face nil
                    :background nil
                    :foreground nil)
(set-face-attribute 'ido-vertical-match-face nil
                    :foreground nil)
(ido-vertical-mode 1)


;;
;; ido yes or no (https://github.com/DarwinAwardWinner/ido-yes-or-no)
;;
(require 'ido-yes-or-no)
(ido-yes-or-no-mode 1)


;;
;; go to last change (https://github.com/camdez/goto-last-change.el)
;;
(require 'goto-last-change)
(global-set-key "\C-x\C-g" 'goto-last-change)


;;
;; Rainbow delimiters (https://github.com/Fanael/rainbow-delimiters)
;;
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)


;;
;; ag search (https://github.com/Wilfred/ag.el)
;;
;; requires the binary the_silver_searcher (sudo zypper in the_silver_searcher)


;;
;; rvm.el (https://github.com/senny/rvm.el)
;;


;;
;; robe ()
;;
;;(add-hook 'ruby-mode-hook 'robe-mode)
;;(eval-after-load 'company
;;  '(push 'company-robe company-backends))
;;(add-hook 'robe-mode-hook 'ac-robe-setup)


;;
;; fiplr (https://github.com/grizzl/fiplr)
;;
(setq fiplr-ignored-globs '((directories (".git" ".svn"))
                            (files ("*.jpg" "*.png" "*.zip" "*~" ".keep"))))
(global-set-key (kbd "C-x f") 'fiplr-find-file)
(global-set-key (kbd "C-x g") 'fiplr-find-directory)


;;
;; yasnippet (https://github.com/joaotavora/yasnippet)
;;
(yas-global-mode 1)


;;
;; Magit
;;
(global-set-key (kbd "C-x x") 'magit-status)
(global-set-key (kbd "C-x c") 'magit-diff-unstaged)
(global-set-key (kbd "C-x w") 'magit-log-current)
(global-set-key (kbd "C-x t") 'magit-commit)
(global-set-key (kbd "C-x y") 'magit-commit-amend)

;;
;; Load additional scripts/congigs
;;
;; mpsyt emacs https://punchagan.muse-amuse.in/posts/playing-music-using-mpsyt-from-emacs.html

(defun pc/short-url-at-point ()
  "Gets the short url at point.

This function is required only because
`thing-at-point-url-at-point' ignores urls (without a scheme)
that don't start with www."
  (let ((bounds (thing-at-point-bounds-of-url-at-point t)))
    (when (and bounds (< (car bounds) (cdr bounds)))
      (buffer-substring-no-properties (car bounds) (cdr bounds)))))

(defun pc/mpsyt-url (url)
  (let ((buffer (current-buffer))
	(mpsyt-proc-name "*mpsyt*"))

    ;; Start a new term with *mpsyt* if there isn't one
    (unless (get-process mpsyt-proc-name)
      (when (get-buffer mpsyt-proc-name)
	(kill-buffer (get-buffer mpsyt-proc-name)))
      (ansi-term "mpsyt" "mpsyt"))

    ;; Play given url in mpsyt
    (let ((mpsyt-proc (get-process mpsyt-proc-name)))
      ;; If something is already playing, stop it and play this...
      (term-send-string mpsyt-proc "\n\n\n")
      ;; We wait for a bit, since looking for the prompt seems to fail, sometimes?
      (sleep-for 1)
      (term-send-string mpsyt-proc "\n")

      ;; Actually send the command to playurl
      (term-simple-send (get-process mpsyt-proc-name)
			(format "playurl %s" url)))

    (switch-to-buffer buffer)))

(defun pc/mpsyt-url-at-point ()
  "Play the URL at point using mpsyt."
  (interactive)
  (let ((url (or (url-get-url-at-point) (pc/short-url-at-point))))
    (if (not url)
      (message "No URL found")
	(message (format "Playing %s with mpsyt" url))
      (pc/mpsyt-url url))))

;;
;; End load
;;

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (yasnippet robe fiplr rvm ag rainbow-delimiters goto-last-change ido-yes-or-no ido-vertical-mode project-explorer ace-jump-mode moe-theme web-mode drag-stuff smex list-packages-ext elscreen projectile-rails smart-mode-line smart-cursor-color magit evil ample-theme))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
